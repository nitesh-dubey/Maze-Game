[{"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/index.js":"1","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/App.js":"2","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/reportWebVitals.js":"3","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/Game.js":"4","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/GameBoard.js":"5","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/generateMaze.js":"6"},{"size":500,"mtime":1611847089614,"results":"7","hashOfConfig":"8"},{"size":194,"mtime":1611847753288,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611847089614,"results":"10","hashOfConfig":"8"},{"size":5082,"mtime":1611957537850,"results":"11","hashOfConfig":"8"},{"size":2653,"mtime":1611957058175,"results":"12","hashOfConfig":"8"},{"size":4534,"mtime":1611947229759,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1um4a14",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/index.js",[],["30","31"],"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/App.js",[],"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/reportWebVitals.js",[],"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/Game.js",["32","33"],"import React, { useState, useEffect } from \"react\";\nimport { generateMaze } from \"./generateMaze\";\nimport GameBoard from \"./GameBoard\";\nimport \"../css/Game.css\";\n\nimport KeyHandler from \"react-key-handler\";\n\nconst Game = (props) => {\n  const [showGameBoard, setShowGameBoard] = useState(false);\n  const [boardHeight, setBoardHeight] = useState(0);\n  const [boardWidth, setBoardWidth] = useState(0);\n  const [playerPosition, setPlayerPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [randomPositions, setRandomPositions] = useState([]);\n  const [totalMoves, setTotalMoves] = useState(0);\n  const [maze, setMaze] = useState(null);\n  const [timer, setTimer] = useState(0);\n\n  //let maze = null;\n\n  function getBoardDimensions() {\n    let bWidth = prompt(\"Enter the Board Width\");\n    if (bWidth > 0) {\n      let bHeight = prompt(\"Enter the Board Height\");\n      if (bHeight > 0) {\n        setBoardHeight((_) => bHeight);\n        setBoardWidth((_) => bWidth);\n        //generateCollectables();\n      } else {\n        getBoardDimensions();\n      }\n    } else {\n      getBoardDimensions();\n    }\n  }\n\n  function generateCollectables() {\n    let randomPos = [];\n    let randomVals = [];\n    let minval = Math.min(boardWidth, boardHeight);\n    for (let i = 0; i < Math.ceil(minval / 2); i++) {\n      let val = Math.floor(Math.random() * minval);\n      if (!randomVals.includes(val)) {\n        randomVals.push(val);\n      }\n    }\n\n    for (let i = 0; i < randomVals.length; i++) {\n      for (let j = 0; j < randomVals.length; j++) {\n        randomPos.push({\n          x: randomVals[i],\n          y: randomVals[j],\n        });\n      }\n    }\n    setRandomPositions((_) => randomPos);\n    //console.log(\"width : \", boardWidth, \"Height : \", boardHeight);\n    // if (boardWidth > 0 && boardHeight > 0) {\n    //   let _maze = generateMaze(boardWidth, boardHeight);\n    //   setMaze(() => _maze);\n    // }\n    // setShowGameBoard(true);\n  }\n\n  function countTotalMoves() {\n    setTotalMoves((moves) => moves + 1);\n  }\n\n  useEffect(() => {\n    getBoardDimensions();\n  }, []);\n\n  useEffect(() => {\n    if (boardWidth > 0 && boardHeight > 0) {\n      generateCollectables();\n\n      //console.log(\"width : \", boardWidth, \"Height : \", boardHeight);\n      //let _maze = generateMaze(boardWidth, boardHeight);\n      setMaze(() => generateMaze(boardWidth, boardHeight));\n    }\n  }, [boardWidth, boardHeight]);\n\n  useEffect(() => {\n    setShowGameBoard(true);\n  }, [maze]);\n\n  //Setting Timer\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer]);\n\n  const handleKeyUp = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].upBorder === true ||\n      Number(playerPosition.x) - 1 < 0\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x) - 1, y: Number(prev.y) }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyDown = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].downBorder === true ||\n      Number(playerPosition.x) + 1 >= boardHeight\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x) + 1, y: Number(prev.y) }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyLeft = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].leftBorder === true ||\n      Number(playerPosition.y) - 1 < 0\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x), y: Number(prev.y) - 1 }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyRight = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].rightBorder === true ||\n      Number(playerPosition.y) + 1 >= boardWidth\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x), y: Number(prev.y) + 1 }));\n\n    countTotalMoves();\n  };\n\n  // console.log(maze);\n  // console.log(\"random Pos : \", randomPositions);\n  // console.log(\"width : \", boardWidth, \"height : \", boardHeight);\n  // console.log(\"player pos : \", playerPosition);\n  // console.log(\"total moves : \", totalMoves);\n\n  return (\n    <div className=\"main-container\">\n      <div>{showGameBoard && <h2>Time : {timer}</h2>}</div>\n\n      <div>{showGameBoard && <h2>Moves : {totalMoves}</h2>}</div>\n\n      <div>\n        <KeyHandler keyValue=\"ArrowUp\" onKeyHandle={handleKeyUp} />\n        <KeyHandler keyValue=\"ArrowDown\" onKeyHandle={handleKeyDown} />\n        <KeyHandler keyValue=\"ArrowLeft\" onKeyHandle={handleKeyLeft} />\n        <KeyHandler keyValue=\"ArrowRight\" onKeyHandle={handleKeyRight} />\n\n        {showGameBoard && (\n          <GameBoard\n            maze={maze}\n            randomPositions={randomPositions}\n            boardWidth={boardWidth}\n            boardHeight={boardHeight}\n            totalMoves={totalMoves}\n            playerPosition={playerPosition}\n            setRandomPositions={setRandomPositions}\n          />\n        )}\n      </div>\n      <div>\n        <h4>Collect All X !</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/GameBoard.js",["34","35"],"import React, { useState, useEffect } from \"react\";\n\nconst GameBoard = (props) => {\n  //{maze, randomPositions, boardWidth, boardHeight, totalMoves, playerPosition} = props;\n\n  // console.log(props.maze);\n  // console.log(\"random Pos : \", props.randomPositions);\n  // console.log(\"width : \", props.boardWidth, \"height : \", props.boardHeight);\n  // console.log(\"player pos : \", props.playerPosition);\n  // console.log(\"total moves : \", props.totalMoves);\n\n  const [randomPosLen, setRandomPosLen] = useState(\n    props.randomPositions.length\n  );\n\n  useEffect(() => {\n    setRandomPosLen(props.randomPositions.length);\n  }, [props.randomPositions]);\n\n  useEffect(() => {\n    if (props.maze && randomPosLen === 0) {\n      alert(\"Game Completed\");\n      window.location.reload();\n    }\n  }, [randomPosLen]);\n\n  if (!props.maze) {\n    return <h1>Loading...</h1>;\n  }\n  console.log(props);\n\n  function handleCellContent(x, y) {\n    if (props.playerPosition.x === x && props.playerPosition.y === y) {\n      let collectablePos = props.randomPositions.find(\n        (pos) =>\n          pos.x === props.playerPosition.x && pos.y === props.playerPosition.y\n      );\n\n      if (collectablePos) {\n        props.setRandomPositions((prevArray) => {\n          return prevArray.filter((pos) => pos != collectablePos);\n        });\n      }\n\n      return \"O\";\n    } else if (props.randomPositions.some((pos) => pos.x === x && pos.y === y))\n      return \"X\";\n    else return \" \";\n  }\n\n  console.log(props.maze);\n  console.log(props.randomPositions);\n\n  return (\n    <table>\n      <tbody>\n        {\" \"}\n        {props.maze.map((row, x) => (\n          <tr key={x}>\n            {row.map((cell, y) => (\n              <td\n                key={y}\n                style={{\n                  // border: \"1px solid black\",\n                  borderLeft: cell.leftBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderRight: cell.rightBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderTop: cell.upBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderBottom: cell.downBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  textAlign: \"center\",\n                  verticalAlign: \"middle\",\n                  width: 55,\n                  height: 55,\n                }}\n              >\n                <p>{handleCellContent(x, y)}</p>\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default GameBoard;\n",["36","37"],"/home/nitesh/Documents/Germatia Technologies Intern Assessment/Part 2/my-maze-game/src/components/generateMaze.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":73,"column":6,"nodeType":"44","endLine":73,"endColumn":8,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":83,"column":6,"nodeType":"44","endLine":83,"endColumn":31,"suggestions":"47"},{"ruleId":"42","severity":1,"message":"48","line":25,"column":6,"nodeType":"44","endLine":25,"endColumn":20,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":41,"column":48,"nodeType":"52","messageId":"53","endLine":41,"endColumn":50},{"ruleId":"38","replacedBy":"54"},{"ruleId":"40","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBoardDimensions'. Either include it or remove the dependency array.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'generateCollectables'. Either include it or remove the dependency array.",["59"],"React Hook useEffect has a missing dependency: 'props.maze'. Either include it or remove the dependency array.",["60"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [getBoardDimensions]",{"range":"67","text":"68"},"Update the dependencies array to be: [boardWidth, boardHeight, generateCollectables]",{"range":"69","text":"70"},"Update the dependencies array to be: [props.maze, randomPosLen]",{"range":"71","text":"72"},[2062,2064],"[getBoardDimensions]",[2365,2390],"[boardWidth, boardHeight, generateCollectables]",[787,801],"[props.maze, randomPosLen]"]