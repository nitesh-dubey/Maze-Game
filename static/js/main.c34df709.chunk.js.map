{"version":3,"sources":["components/GameBoard.js","components/Game.js","components/generateMaze.js","App.js","reportWebVitals.js","index.js"],"names":["GameBoard","props","useState","randomPositions","length","randomPosLen","setRandomPosLen","useEffect","maze","alert","window","location","reload","handleCellContent","x","y","playerPosition","collectablePos","find","pos","setRandomPositions","prevArray","filter","some","map","row","cell","style","borderLeft","leftBorder","borderRight","rightBorder","borderTop","upBorder","borderBottom","downBorder","textAlign","verticalAlign","width","height","Game","showGameBoard","setShowGameBoard","boardHeight","setBoardHeight","boardWidth","setBoardWidth","setPlayerPosition","totalMoves","setTotalMoves","setMaze","timer","setTimer","getBoardDimensions","bWidth","prompt","bHeight","_","countTotalMoves","moves","randomPos","randomVals","minval","Math","min","i","ceil","val","floor","random","includes","push","j","generateCollectables","Number","vis","neigh","randomRowIndices","shuffle","Array","keys","randomColIndices","getRandomUnvisitedNeighbour","currCell","unvisNeigh","p","nx","ny","randomNeigh","getVisitedNeighbour","visNeigh","randomVisNeigh","hunt","col","nextCell","kill","rowVis","randomX","randomY","huntAndKill","generateMaze","intervalId","setInterval","clearInterval","className","keyValue","onKeyHandle","e","preventDefault","prev","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAEA,IA6EeA,EA7EG,SAACC,GAAW,IAAD,EACaC,mBACtCD,EAAME,gBAAgBC,QAFG,mBACpBC,EADoB,KACNC,EADM,KAgB3B,GAXAC,qBAAU,WACRD,EAAgBL,EAAME,gBAAgBC,UACrC,CAACH,EAAME,kBAEVI,qBAAU,WACJN,EAAMO,MAAyB,IAAjBH,IAChBI,MAAM,kBACNC,OAAOC,SAASC,YAEjB,CAACP,KAECJ,EAAMO,KACT,OAAO,4CAGT,SAASK,EAAkBC,EAAGC,GAC5B,GAAId,EAAMe,eAAeF,IAAMA,GAAKb,EAAMe,eAAeD,IAAMA,EAAG,CAChE,IAAIE,EAAiBhB,EAAME,gBAAgBe,MACzC,SAACC,GAAD,OACEA,EAAIL,IAAMb,EAAMe,eAAeF,GAAKK,EAAIJ,IAAMd,EAAMe,eAAeD,KASvE,OANIE,GACFhB,EAAMmB,oBAAmB,SAACC,GACxB,OAAOA,EAAUC,QAAO,SAACH,GAAD,OAASA,GAAOF,QAIrC,IACF,OAAIhB,EAAME,gBAAgBoB,MAAK,SAACJ,GAAD,OAASA,EAAIL,IAAMA,GAAKK,EAAIJ,IAAMA,KAC/D,IACG,IAGd,OACE,gCACE,gCACGd,EAAMO,KAAKgB,KAAI,SAACC,EAAKX,GAAN,OACd,6BACGW,EAAID,KAAI,SAACE,EAAMX,GAAP,OACP,oBAEEY,MAAO,CAELC,WAAYF,EAAKG,WACb,kBACA,kBACJC,YAAaJ,EAAKK,YACd,kBACA,kBACJC,UAAWN,EAAKO,SACZ,kBACA,kBACJC,aAAcR,EAAKS,WACf,kBACA,kBACJC,UAAW,SACXC,cAAe,SACfC,MAAO,GACPC,OAAQ,IAnBZ,SAsBE,4BAAI1B,EAAkBC,EAAGC,MArBpBA,OAHFD,W,eCmIJ0B,EAzKF,SAACvC,GAAW,IAAD,EACoBC,oBAAS,GAD7B,mBACfuC,EADe,KACAC,EADA,OAEgBxC,mBAAS,GAFzB,mBAEfyC,EAFe,KAEFC,EAFE,OAGc1C,mBAAS,GAHvB,mBAGf2C,EAHe,KAGHC,EAHG,OAIsB5C,mBAAS,CACnDY,EAAG,EACHC,EAAG,IANiB,mBAIfC,EAJe,KAIC+B,EAJD,OAQwB7C,mBAAS,IARjC,mBAQfC,EARe,KAQEiB,EARF,OASclB,mBAAS,GATvB,mBASf8C,EATe,KASHC,EATG,OAUE/C,mBAAS,MAVX,mBAUfM,EAVe,KAUT0C,EAVS,OAWIhD,mBAAS,GAXb,mBAWfiD,EAXe,KAWRC,EAXQ,KAetB,SAASC,IACP,IAAIC,EAASC,OAAO,yBACpB,GAAID,EAAS,EAAG,CACd,IAAIE,EAAUD,OAAO,0BACjBC,EAAU,GACZZ,GAAe,SAACa,GAAD,OAAOD,KACtBV,GAAc,SAACW,GAAD,OAAOH,MAGrBD,SAGFA,IA0BJ,SAASK,IACPT,GAAc,SAACU,GAAD,OAAWA,EAAQ,KAGnCpD,qBAAU,WACR8C,MACC,IAEH9C,qBAAU,WACJsC,EAAa,GAAKF,EAAc,KA/BtC,WAIE,IAHA,IAAIiB,EAAY,GACZC,EAAa,GACbC,EAASC,KAAKC,IAAInB,EAAYF,GACzBsB,EAAI,EAAGA,EAAIF,KAAKG,KAAKJ,EAAS,GAAIG,IAAK,CAC9C,IAAIE,EAAMJ,KAAKK,MAAML,KAAKM,SAAWP,GAChCD,EAAWS,SAASH,IACvBN,EAAWU,KAAKJ,GAIpB,IAAK,IAAIF,EAAI,EAAGA,EAAIJ,EAAWzD,OAAQ6D,IACrC,IAAK,IAAIO,EAAI,EAAGA,EAAIX,EAAWzD,OAAQoE,IACrCZ,EAAUW,KAAK,CACbzD,EAAG+C,EAAWI,GACdlD,EAAG8C,EAAWW,KAIpBpD,GAAmB,SAACqC,GAAD,OAAOG,KAaxBa,GAEAvB,GAAQ,kBCvEP,SAAsBL,EAAYF,GACvC,IAAIa,EAAUkB,OAAO/B,GACjBW,EAASoB,OAAO7B,GAEhBrC,EAAO,GACPmE,EAAM,GACNC,EAAQ,CACV,CAAE9D,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,GAAI,IAEV8D,EAAmBpB,IAAEqB,QAAF,YAAcC,MAAMvB,GAASwB,SAChDC,EAAmBxB,IAAEqB,QAAF,YAAcC,MAAMzB,GAAQ0B,SAEnD,SAASE,EAA4BC,GAKnC,IAJA,IAAIrE,EAAIqE,EAASrE,EACfC,EAAIoE,EAASpE,EACXqE,EAAa,GAEjB,MAAcR,EAAd,eAAqB,CAAhB,IAAIS,EAAC,KACJC,EAAKxE,EAAIuE,EAAEvE,EACbyE,EAAKxE,EAAIsE,EAAEtE,EACTuE,EAAK,GAAKC,EAAK,GAAKD,GAAM9B,GAAW+B,GAAMjC,GAC1CqB,EAAIW,GAAIC,IACXH,EAAWb,KAAK,CAAEzD,EAAGwE,EAAIvE,EAAGwE,IAGhC,GAA0B,IAAtBH,EAAWhF,OAAc,OAAO,KACpC,IAAIoF,EAAcJ,EAAWrB,KAAKK,MAAML,KAAKM,SAAWe,EAAWhF,SACnE,OAAOI,EAAKgF,EAAY1E,GAAG0E,EAAYzE,GAGzC,SAAS0E,EAAoBN,GAK3B,IAJA,IAAIrE,EAAIqE,EAASrE,EACfC,EAAIoE,EAASpE,EACX2E,EAAW,GAEf,MAAcd,EAAd,eAAqB,CAAhB,IAAIS,EAAC,KACJC,EAAKxE,EAAIuE,EAAEvE,EACbyE,EAAKxE,EAAIsE,EAAEtE,EACTuE,EAAK,GAAKC,EAAK,GAAKD,GAAM9B,GAAW+B,GAAMjC,GAC3CqB,EAAIW,GAAIC,IAAKG,EAASnB,KAAK,CAAEzD,EAAGwE,EAAIvE,EAAGwE,IAE7C,GAAwB,IAApBG,EAAStF,OAAc,OAAO,KAClC,IAAIuF,EAAiBD,EAAS3B,KAAKK,MAAML,KAAKM,SAAWqB,EAAStF,SAClE,OAAOI,EAAKmF,EAAe7E,GAAG6E,EAAe5E,GAG/C,SAAS6E,IAAQ,IAAD,gBACEf,GADF,IACd,2BAAkC,CAAC,IAAD,EAAzBpD,EAAyB,sBAChBwD,GADgB,IAChC,2BAAkC,CAAC,IAA1BY,EAAyB,QAChC,IAAKlB,EAAIlD,GAAKoE,GAAM,CAClB,IAAIV,EAAW3E,EAAKiB,GAAKoE,GACrBC,EAAWL,EAAoBN,GAEnC,GAAIW,EAwBF,OAvBIA,EAAShF,IAAMqE,EAASrE,EAAI,GAAKgF,EAAS/E,IAAMoE,EAASpE,GAC3DP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGkB,UAAW,EACxCzB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGoB,YAAa,GAE1C2D,EAAShF,IAAMqE,EAASrE,EAAI,GAC5BgF,EAAS/E,IAAMoE,EAASpE,GAExBP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGoB,YAAa,EAC1C3B,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGkB,UAAW,GAExC6D,EAAShF,IAAMqE,EAASrE,GACxBgF,EAAS/E,IAAMoE,EAASpE,EAAI,GAE5BP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGc,YAAa,EAC1CrB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGgB,aAAc,IAE3CvB,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGgB,aAAc,EAC3CvB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGc,YAAa,GAG5C8C,EAAIQ,EAASrE,GAAGqE,EAASpE,IAAK,EAC9B4D,EAAImB,EAAShF,GAAGgF,EAAS/E,IAAK,EAEvBoE,IA9BmB,gCADpB,8BAoCd,OAAO,KAGT,SAASY,EAAKZ,GACZ,KAAOA,GAAU,CACf,IAAIW,EAAWZ,EAA4BC,GAEvCW,IACEA,EAAShF,IAAMqE,EAASrE,EAAI,GAAKgF,EAAS/E,IAAMoE,EAASpE,GAC3DP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGkB,UAAW,EACxCzB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGoB,YAAa,GACjC2D,EAAShF,IAAMqE,EAASrE,EAAI,GAAKgF,EAAS/E,IAAMoE,EAASpE,GAClEP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGoB,YAAa,EAC1C3B,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGkB,UAAW,GAC/B6D,EAAShF,IAAMqE,EAASrE,GAAKgF,EAAS/E,IAAMoE,EAASpE,EAAI,GAClEP,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGc,YAAa,EAC1CrB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGgB,aAAc,IAE3CvB,EAAK2E,EAASrE,GAAGqE,EAASpE,GAAGgB,aAAc,EAC3CvB,EAAKsF,EAAShF,GAAGgF,EAAS/E,GAAGc,YAAa,GAG5C8C,EAAIQ,EAASrE,GAAGqE,EAASpE,IAAK,EAC9B4D,EAAImB,EAAShF,GAAGgF,EAAS/E,IAAK,GAEhCoE,EAAWW,GAgBf,IAAK,IAAI7B,EAAI,EAAGA,EAAIT,EAASS,IAAK,CAGhC,IAFA,IAAIxC,EAAM,GACNuE,EAAS,GACJxB,EAAI,EAAGA,EAAIlB,EAAQkB,IAAK,CAC/B,IAAI9C,EAAO,CACTG,YAAY,EACZE,aAAa,EACbE,UAAU,EACVE,YAAY,EACZrB,EAAGmD,EACHlD,EAAGyD,GAEL/C,EAAI8C,KAAK7C,GACTsE,EAAOzB,MAAK,GAEd/D,EAAK+D,KAAK9C,GACVkD,EAAIJ,KAAKyB,GAKX,OAjCA,WAME,IALA,IAAIC,EAAUlC,KAAKK,MAAML,KAAKM,SAAWb,GACrC0C,EAAUnC,KAAKK,MAAML,KAAKM,SAAWf,GAErC6B,EAAW3E,EAAKyF,GAASC,GAEtBf,GACLY,EAAKZ,GACLA,EAAWS,IAuBfO,GAEO3F,ED5EW4F,CAAavD,EAAYF,SAExC,CAACE,EAAYF,IAEhBpC,qBAAU,WACRmC,GAAiB,KAChB,CAAClC,IAGJD,qBAAU,WACR,IAAM8F,EAAaC,aAAY,WAC7BlD,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,KAEH,OAAO,kBAAMoD,cAAcF,MAC1B,CAAClD,IA0DJ,OACE,sBAAKqD,UAAU,iBAAf,UACE,8BAAM/D,GAAiB,yCAAYU,OAEnC,8BAAMV,GAAiB,0CAAaO,OAEpC,gCACE,cAAC,IAAD,CAAYyD,SAAS,UAAUC,YA/DjB,SAACC,GACnBA,EAAEC,kBAGsD,IAAtDpG,EAAKQ,EAAeF,GAAGE,EAAeD,GAAGkB,UACzCyC,OAAO1D,EAAeF,GAAK,EAAI,IAIjCiC,GAAkB,SAAC8D,GAAD,MAAW,CAAE/F,EAAG4D,OAAOmC,EAAK/F,GAAK,EAAGC,EAAG2D,OAAOmC,EAAK9F,OAErE2C,QAqDI,cAAC,IAAD,CAAY+C,SAAS,YAAYC,YAlDjB,SAACC,GACrBA,EAAEC,kBAGwD,IAAxDpG,EAAKQ,EAAeF,GAAGE,EAAeD,GAAGoB,YACzCuC,OAAO1D,EAAeF,GAAK,GAAK6B,IAIlCI,GAAkB,SAAC8D,GAAD,MAAW,CAAE/F,EAAG4D,OAAOmC,EAAK/F,GAAK,EAAGC,EAAG2D,OAAOmC,EAAK9F,OAErE2C,QAwCI,cAAC,IAAD,CAAY+C,SAAS,YAAYC,YArCjB,SAACC,GACrBA,EAAEC,kBAGwD,IAAxDpG,EAAKQ,EAAeF,GAAGE,EAAeD,GAAGc,YACzC6C,OAAO1D,EAAeD,GAAK,EAAI,IAIjCgC,GAAkB,SAAC8D,GAAD,MAAW,CAAE/F,EAAG4D,OAAOmC,EAAK/F,GAAIC,EAAG2D,OAAOmC,EAAK9F,GAAK,MAEtE2C,QA2BI,cAAC,IAAD,CAAY+C,SAAS,aAAaC,YAxBjB,SAACC,GACtBA,EAAEC,kBAGyD,IAAzDpG,EAAKQ,EAAeF,GAAGE,EAAeD,GAAGgB,aACzC2C,OAAO1D,EAAeD,GAAK,GAAK8B,IAIlCE,GAAkB,SAAC8D,GAAD,MAAW,CAAE/F,EAAG4D,OAAOmC,EAAK/F,GAAIC,EAAG2D,OAAOmC,EAAK9F,GAAK,MAEtE2C,QAeKjB,GACC,cAAC,EAAD,CACEjC,KAAMA,EACNL,gBAAiBA,EACjB0C,WAAYA,EACZF,YAAaA,EACbK,WAAYA,EACZhC,eAAgBA,EAChBI,mBAAoBA,OAI1B,8BACE,uD,ME9JO0F,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCKSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c34df709.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst GameBoard = (props) => {\n  const [randomPosLen, setRandomPosLen] = useState(\n    props.randomPositions.length\n  );\n\n  useEffect(() => {\n    setRandomPosLen(props.randomPositions.length);\n  }, [props.randomPositions]);\n\n  useEffect(() => {\n    if (props.maze && randomPosLen === 0) {\n      alert(\"Game Completed\");\n      window.location.reload();\n    }\n  }, [randomPosLen]);\n\n  if (!props.maze) {\n    return <h1>Loading...</h1>;\n  }\n\n  function handleCellContent(x, y) {\n    if (props.playerPosition.x === x && props.playerPosition.y === y) {\n      let collectablePos = props.randomPositions.find(\n        (pos) =>\n          pos.x === props.playerPosition.x && pos.y === props.playerPosition.y\n      );\n\n      if (collectablePos) {\n        props.setRandomPositions((prevArray) => {\n          return prevArray.filter((pos) => pos != collectablePos);\n        });\n      }\n\n      return \"O\";\n    } else if (props.randomPositions.some((pos) => pos.x === x && pos.y === y))\n      return \"X\";\n    else return \" \";\n  }\n\n  return (\n    <table>\n      <tbody>\n        {props.maze.map((row, x) => (\n          <tr key={x}>\n            {row.map((cell, y) => (\n              <td\n                key={y}\n                style={{\n                  // border: \"1px solid black\",\n                  borderLeft: cell.leftBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderRight: cell.rightBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderTop: cell.upBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  borderBottom: cell.downBorder\n                    ? \"2px solid black\"\n                    : \"0px solid black\",\n                  textAlign: \"center\",\n                  verticalAlign: \"middle\",\n                  width: 55,\n                  height: 55,\n                }}\n              >\n                <p>{handleCellContent(x, y)}</p>\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState, useEffect } from \"react\";\nimport { generateMaze } from \"./generateMaze\";\nimport GameBoard from \"./GameBoard\";\nimport \"../css/Game.css\";\n\nimport KeyHandler from \"react-key-handler\";\n\nconst Game = (props) => {\n  const [showGameBoard, setShowGameBoard] = useState(false);\n  const [boardHeight, setBoardHeight] = useState(0);\n  const [boardWidth, setBoardWidth] = useState(0);\n  const [playerPosition, setPlayerPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [randomPositions, setRandomPositions] = useState([]);\n  const [totalMoves, setTotalMoves] = useState(0);\n  const [maze, setMaze] = useState(null);\n  const [timer, setTimer] = useState(0);\n\n  //let maze = null;\n\n  function getBoardDimensions() {\n    let bWidth = prompt(\"Enter the Board Width\");\n    if (bWidth > 0) {\n      let bHeight = prompt(\"Enter the Board Height\");\n      if (bHeight > 0) {\n        setBoardHeight((_) => bHeight);\n        setBoardWidth((_) => bWidth);\n        //generateCollectables();\n      } else {\n        getBoardDimensions();\n      }\n    } else {\n      getBoardDimensions();\n    }\n  }\n\n  function generateCollectables() {\n    let randomPos = [];\n    let randomVals = [];\n    let minval = Math.min(boardWidth, boardHeight);\n    for (let i = 0; i < Math.ceil(minval / 2); i++) {\n      let val = Math.floor(Math.random() * minval);\n      if (!randomVals.includes(val)) {\n        randomVals.push(val);\n      }\n    }\n\n    for (let i = 0; i < randomVals.length; i++) {\n      for (let j = 0; j < randomVals.length; j++) {\n        randomPos.push({\n          x: randomVals[i],\n          y: randomVals[j],\n        });\n      }\n    }\n    setRandomPositions((_) => randomPos);\n  }\n\n  function countTotalMoves() {\n    setTotalMoves((moves) => moves + 1);\n  }\n\n  useEffect(() => {\n    getBoardDimensions();\n  }, []);\n\n  useEffect(() => {\n    if (boardWidth > 0 && boardHeight > 0) {\n      generateCollectables();\n\n      setMaze(() => generateMaze(boardWidth, boardHeight));\n    }\n  }, [boardWidth, boardHeight]);\n\n  useEffect(() => {\n    setShowGameBoard(true);\n  }, [maze]);\n\n  //Setting Timer\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer]);\n\n  const handleKeyUp = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].upBorder === true ||\n      Number(playerPosition.x) - 1 < 0\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x) - 1, y: Number(prev.y) }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyDown = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].downBorder === true ||\n      Number(playerPosition.x) + 1 >= boardHeight\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x) + 1, y: Number(prev.y) }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyLeft = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].leftBorder === true ||\n      Number(playerPosition.y) - 1 < 0\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x), y: Number(prev.y) - 1 }));\n\n    countTotalMoves();\n  };\n\n  const handleKeyRight = (e) => {\n    e.preventDefault();\n\n    if (\n      maze[playerPosition.x][playerPosition.y].rightBorder === true ||\n      Number(playerPosition.y) + 1 >= boardWidth\n    )\n      return;\n\n    setPlayerPosition((prev) => ({ x: Number(prev.x), y: Number(prev.y) + 1 }));\n\n    countTotalMoves();\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div>{showGameBoard && <h2>Time : {timer}</h2>}</div>\n\n      <div>{showGameBoard && <h2>Moves : {totalMoves}</h2>}</div>\n\n      <div>\n        <KeyHandler keyValue=\"ArrowUp\" onKeyHandle={handleKeyUp} />\n        <KeyHandler keyValue=\"ArrowDown\" onKeyHandle={handleKeyDown} />\n        <KeyHandler keyValue=\"ArrowLeft\" onKeyHandle={handleKeyLeft} />\n        <KeyHandler keyValue=\"ArrowRight\" onKeyHandle={handleKeyRight} />\n\n        {showGameBoard && (\n          <GameBoard\n            maze={maze}\n            randomPositions={randomPositions}\n            boardWidth={boardWidth}\n            boardHeight={boardHeight}\n            totalMoves={totalMoves}\n            playerPosition={playerPosition}\n            setRandomPositions={setRandomPositions}\n          />\n        )}\n      </div>\n      <div>\n        <h4>Collect All X !</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import _ from \"lodash\";\nexport function generateMaze(boardWidth, boardHeight) {\n  let bHeight = Number(boardHeight);\n  let bWidth = Number(boardWidth);\n\n  let maze = [];\n  let vis = [];\n  let neigh = [\n    { x: -1, y: 0 },\n    { x: 1, y: 0 },\n    { x: 0, y: 1 },\n    { x: 0, y: -1 },\n  ];\n  let randomRowIndices = _.shuffle([...Array(bHeight).keys()]);\n  let randomColIndices = _.shuffle([...Array(bWidth).keys()]);\n\n  function getRandomUnvisitedNeighbour(currCell) {\n    let x = currCell.x,\n      y = currCell.y;\n    let unvisNeigh = [];\n\n    for (let p of neigh) {\n      let nx = x + p.x,\n        ny = y + p.y;\n      if (nx < 0 || ny < 0 || nx >= bHeight || ny >= bWidth) continue;\n      if (!vis[nx][ny]) {\n        unvisNeigh.push({ x: nx, y: ny });\n      }\n    }\n    if (unvisNeigh.length === 0) return null;\n    let randomNeigh = unvisNeigh[Math.floor(Math.random() * unvisNeigh.length)];\n    return maze[randomNeigh.x][randomNeigh.y];\n  }\n\n  function getVisitedNeighbour(currCell) {\n    let x = currCell.x,\n      y = currCell.y;\n    let visNeigh = [];\n\n    for (let p of neigh) {\n      let nx = x + p.x,\n        ny = y + p.y;\n      if (nx < 0 || ny < 0 || nx >= bHeight || ny >= bWidth) continue;\n      if (vis[nx][ny]) visNeigh.push({ x: nx, y: ny });\n    }\n    if (visNeigh.length === 0) return null;\n    let randomVisNeigh = visNeigh[Math.floor(Math.random() * visNeigh.length)];\n    return maze[randomVisNeigh.x][randomVisNeigh.y];\n  }\n\n  function hunt() {\n    for (let row of randomRowIndices) {\n      for (let col of randomColIndices) {\n        if (!vis[row][col]) {\n          let currCell = maze[row][col];\n          let nextCell = getVisitedNeighbour(currCell);\n\n          if (nextCell) {\n            if (nextCell.x === currCell.x - 1 && nextCell.y === currCell.y) {\n              maze[currCell.x][currCell.y].upBorder = false;\n              maze[nextCell.x][nextCell.y].downBorder = false;\n            } else if (\n              nextCell.x === currCell.x + 1 &&\n              nextCell.y === currCell.y\n            ) {\n              maze[currCell.x][currCell.y].downBorder = false;\n              maze[nextCell.x][nextCell.y].upBorder = false;\n            } else if (\n              nextCell.x === currCell.x &&\n              nextCell.y === currCell.y - 1\n            ) {\n              maze[currCell.x][currCell.y].leftBorder = false;\n              maze[nextCell.x][nextCell.y].rightBorder = false;\n            } else {\n              maze[currCell.x][currCell.y].rightBorder = false;\n              maze[nextCell.x][nextCell.y].leftBorder = false;\n            }\n\n            vis[currCell.x][currCell.y] = true;\n            vis[nextCell.x][nextCell.y] = true;\n\n            return currCell;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  function kill(currCell) {\n    while (currCell) {\n      let nextCell = getRandomUnvisitedNeighbour(currCell);\n\n      if (nextCell) {\n        if (nextCell.x === currCell.x - 1 && nextCell.y === currCell.y) {\n          maze[currCell.x][currCell.y].upBorder = false;\n          maze[nextCell.x][nextCell.y].downBorder = false;\n        } else if (nextCell.x === currCell.x + 1 && nextCell.y === currCell.y) {\n          maze[currCell.x][currCell.y].downBorder = false;\n          maze[nextCell.x][nextCell.y].upBorder = false;\n        } else if (nextCell.x === currCell.x && nextCell.y === currCell.y - 1) {\n          maze[currCell.x][currCell.y].leftBorder = false;\n          maze[nextCell.x][nextCell.y].rightBorder = false;\n        } else {\n          maze[currCell.x][currCell.y].rightBorder = false;\n          maze[nextCell.x][nextCell.y].leftBorder = false;\n        }\n\n        vis[currCell.x][currCell.y] = true;\n        vis[nextCell.x][nextCell.y] = true;\n      }\n      currCell = nextCell;\n    }\n  }\n\n  function huntAndKill() {\n    let randomX = Math.floor(Math.random() * bHeight);\n    let randomY = Math.floor(Math.random() * bWidth);\n\n    let currCell = maze[randomX][randomY];\n\n    while (currCell) {\n      kill(currCell);\n      currCell = hunt();\n    }\n  }\n\n  for (let i = 0; i < bHeight; i++) {\n    let row = [];\n    let rowVis = [];\n    for (let j = 0; j < bWidth; j++) {\n      let cell = {\n        leftBorder: true,\n        rightBorder: true,\n        upBorder: true,\n        downBorder: true,\n        x: i,\n        y: j,\n      };\n      row.push(cell);\n      rowVis.push(false);\n    }\n    maze.push(row);\n    vis.push(rowVis);\n  }\n\n  huntAndKill();\n\n  return maze;\n}\n","import React from \"react\";\nimport Game from \"./components/Game\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}